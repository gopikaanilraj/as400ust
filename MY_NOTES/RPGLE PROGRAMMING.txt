RPGLE PROGRAMMING
-----------------

Source type --> RPGLE
src phy file --> QRPGLESRC
CRTSRCPF QRPGLESRC

Specifications used :
H-->control spec (controls the way hoe prog is created and how it behaves) eg: DATFMT(*MDY)
F-->file spec (file declaration -- needs to be declared before use)
O-->output spec (defines structure of the output[like reports])
P-->procedure spec (procedure declaration )
D-->definition spec (any vars, ds etc that needs to be used declared here)
C-->calculation spec (all the operations coded here)

7TH position * --> comment line
Indicator variables --> 0 and 1 
In Rpgle last record indicator --> to inform the end of the prgm  *INLR = '1'
Compilation :
Run --> CALL <PGMNAME>

FILE OPERATIONS
---------------

To declare files --> F spec F4 --> filename(needs to be present inside the lib) -->filetype F1 (I readmode, O writemode, U read&update mode, C combined type-input+output) --> file designation(if output only file give blank)__almost all types given F[procedural file]--> file addition (A__can write)-->file format(majority E)--> record address (k__seq will be order of key, blank__arrival order)
device-->
screens in as400-->workstations
files --> disk

To read -- > operation code--READ, factor2 --filename
do while opcode --> DOW    NOT %EOF()    ENDDO
do until --> DOU
for --> FOR

To set a pointer towards a specific record --> SETLL set lower limit
 --> SETGT set greater limit

Reverse --> READP(read prev) + SETGT
READE-->read eql
READPE--> read previous equal
*loval SETLL
*hival SETGT
reverse order also NOT %EOF()


dEBUG

14-->F4-->F10-->Compiler options *NODEBUGIO -->*SRC-->STRDBG-->f4-->*yes(update prodfiles)-->place a cursor on the line where u have to strt debugging and then f6-->f12-->call-->f10-->ev <value to be seen> OR keep cursor on the required var then f11-->enddbg


Screen designing - STRSDA


EXFMT 
*IN03 = 0
Re-edit --> option 12
option 17 --> change using sda
To change names and length of the field --> '?'
To cut and paste on screen --> give '-' at both the ends of the field then give = at the destination
To copy --> give - and the ==


Already in use error --> To end that job so that it can be used again --> WRKUSRJOB (will give details of all jobs of a particular user)
OUTQ-->job has completed
2nd colmn --> give ACTIVE
Then delete (4) the not current jobs
When we get to LEAVE cntrl will go to the 1st statement after the loop
When you have multiple screens first screen exits using f3 and rest all sub screens using f12
With f12 we will use CF
To create we use f6
Submit create job in batch -- give blanks
subroutines start with 'beginsr' operation code
to end --> endsr
to execute subroutines --> exsr
after exsr --> iter
In order to highlight --> Display attributes --Reverse image - Y -- any indicator which we are not using like 87
Other  EVAL *IN87 = *ON


***************************************************************************************************
01-01-2025
***************************************************************************************************
HOPTION(*NODEBUGIO:*SRCSTMT:*NOUNREF)

%NULLIND(FLD01)

To initialise at dspec --> give keyword INZ (for default) or INZ(5)[to supply our own default value]

To declare constants --> d spec --> declaration type (C) --> keyword CONST(<VAL>)

LIKE(EMPNO) so no need to give attributes and all


JOURNAL - log to keep all database transactions
CRTJRNRCV --> create journal receiver
CRTJRN --> create jornal
CRTJRN JRN(JRNEXMP) JRNRCV(JRNRCVEXM) 
STRJRNPF --> Start journal pF

STRJRNPF FILE(GOPZLIB/EMPPF) JRN(JRNEXMP) IMAGES(*BOTH) OMTJRNE(*OPNCLO)
 1 of 1 files have started journaling.

One journal can be attached to multiple files

DSPJRN
Find jrn name from DSPFD

only BOTHER ABOUT PT/PX  entry(Add entry)
UB --> before update
UP --> after update
DL --> delete record


To end --> ENDJRNPF

--------------------------------------
CONSTRAINTS
--------------------------------------
ADDPFCST

Referential constraint --> foreign key


Display files that contains contents in tabular form -- subfiles --has 2 formats linked to each other --- cntrl format and subfile format

field headings in ctrl
input output in sfl

Define general keywords 


STRSDA
option 1
give member name
option 1 add record
give sfl
give control name
enter
on reaching control -->give yyyy --> give indicators-->sflsize 9999, sflpag 8

**********************************************************************************
02-01-2025
**********************************************************************************
F10(on screen of sfl) --> DATABASE FILES (OPTION 2--select all fields for input) do this only on main subfile
Give &<fieldnumber given on screen> --> enter

to make simple edits u can edit from ddssrc using option 2
in footer fn key texts give the indicators in ctrl

when the rec field names and sfl field names are same we do not need to move data from file to sfl just read from file, increment rrn and then write into sfl

LEAVESR --> exit subroutine

shift+f3 browse and copy

subfiles --load all,single page, elastic(self extendable--pgup sys will take care pgdwn we need to give) subfiles

wrkqry f4
RUNQRY <qry name like EMPQRY>
SFLNXTCHG


*******************************************************************************************************
03-01-2025
********************************************************************************************************
SUBFILE bts command --> reffld

*******************************************************************************************************
04-01-2025
******************************************************************************************************
If you do not  increment rrn properly it will lead to duplicate records

IF(FILTER = FILEFIELD AND FILTER <> ' ')
OR  FILTER = ' '

SFLRCDMBR (DDS lvl keyword/fn) 2 params --> CURSOR/*TOP